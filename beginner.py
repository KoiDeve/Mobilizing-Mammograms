# -*- coding: utf-8 -*-
"""beginner.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/KoiDeve/Rice-Datathon/blob/main/beginner.ipynb
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

certified_path = '/content/drive/MyDrive/Datathon/beginner.csv'
certified = pd.read_csv(certified_path)

census_path = '/content/drive/MyDrive/Datathon/sc-est2019-agesex-civ.csv'
census = pd.read_csv(census_path)

import warnings
warnings.filterwarnings("ignore")

certified[certified['Address 1']=="Inc."]

for i, row in certified.iterrows():
    for j, val in enumerate(row):
        if j > 4 and len(str(val)) == 2:
            for x in range(j-5):
              certified.loc[i, 'City':] = certified.loc[i, 'City':].shift(-1)
            break

# certified[certified['Address 1']=="Inc."]

for i, row in certified.iterrows():
    if pd.isnull(row['State']) or len(row['State']) != 2:
         print(row)

from pathlib import Path  
filepath = Path('/content/drive/MyDrive/Datathon/beginner_clean.csv')  
filepath.parent.mkdir(parents=True, exist_ok=True)  
certified.to_csv(filepath)

facilities = certified['State'].value_counts().to_frame('facilities').reset_index().rename(columns={'index': 'State'})
facilities = facilities.iloc[:-6]
facilities = facilities[facilities['State'] != 'PR']
facilities.shape

state_abbreviations = {'AL':'Alabama', 'AK':'Alaska', 'AZ':'Arizona', 'AR':'Arkansas', 'CA':'California',
                      'CO':'Colorado', 'CT':'Connecticut', 'DC' :'District Of Columbia', 'DE':'Delaware', 'FL':'Florida', 'GA':'Georgia',
                      'HI':'Hawaii', 'ID':'Idaho', 'IL':'Illinois', 'IN':'Indiana', 'IA':'Iowa',
                      'KS':'Kansas', 'KY':'Kentucky', 'LA':'Louisiana', 'ME':'Maine', 'MD':'Maryland',
                      'MA':'Massachusetts', 'MI':'Michigan', 'MN':'Minnesota', 'MS':'Mississippi',
                      'MO':'Missouri', 'MT':'Montana', 'NE':'Nebraska', 'NV':'Nevada', 'NH':'New Hampshire',
                      'NJ':'New Jersey', 'NM':'New Mexico', 'NY':'New York', 'NC':'North Carolina',
                      'ND':'North Dakota', 'OH':'Ohio', 'OK':'Oklahoma', 'OR':'Oregon', 'PA':'Pennsylvania',
                      'RI':'Rhode Island', 'SC':'South Carolina', 'SD':'South Dakota', 'TN':'Tennessee',
                      'TX':'Texas', 'UT':'Utah', 'VT':'Vermont', 'VA':'Virginia', 'WA':'Washington',
                      'WV':'West Virginia', 'WI':'Wisconsin', 'WY':'Wyoming'}

facilities['Full_State'] = facilities['State'].map(state_abbreviations)
facilities.sort_values(by='Full_State', inplace=True, ignore_index=True)
print(facilities)

census.isna()
census.dropna(inplace = True)

census.drop_duplicates(inplace = True)

agedf = census[(census['AGE']>=40)&(census['AGE']<=75)&(census['SEX']==2)&(census['STATE']!=0)]

clients = pd.DataFrame(columns=['pop'])

for i in range(56):
  df = {'pop': 0}
  clients = clients.append(df, ignore_index = True)

for i, row in agedf.iterrows():
    if row[3] > 0 and row[3] <= 56:
      clients.at[row[3]-1, 'pop'] += row['POPEST2019_CIV']

clients = clients[clients['pop'] != 0].reset_index()

clients.shape

df = pd.concat([facilities, clients], axis=1).drop(['index'], axis=1)
df['ratio'] = df['pop'] / df['facilities']
df['ratio'] = df['ratio'].apply(lambda x: round(x, 2))
df



import matplotlib.pyplot as plt

titleFormat = {'size':30,'weight':'bold','y':1.03}
labelFormatOut = {'size': 20, 'weight': 'bold', 'labelpad': 20}
    

plt.figure(figsize = (12,8))
df.groupby('Full_State')['ratio'].mean().sort_values().tail(15).plot(kind='barh', color = (0.8,0,0))
plt.title('Amount of People per Facility', **titleFormat)
plt.xlabel('People per Facility', **labelFormatOut)
plt.xticks(rotation=30)
plt.ylabel('State', **labelFormatOut)
ax = plt.subplot()
ax.set_axisbelow(True)
ax.xaxis.grid(color='gray', linestyle='dashed')
plt.show()

import plotly.express as px

fig = px.choropleth(df,  # your dataframe with the state values
                    locations='State',  # column with the state abbreviation
                    locationmode='USA-states',  # set the map to show USA states
                    color='ratio',  # column with the value you want to use for shading
                    hover_name='State',  # column to show when hovering over a state
                    title='<b>Population per Facility by State</b>',  # title of the map
                    color_continuous_scale='hot_r',  # set the color scale to 'hot'
                    height=700,  # set the height of the map
                    width=1000)  # set the width of the map

fig.update_layout(
    title_font_size=50, 
    title_x=0.5,
    title_y=0.9
)
fig.update_geos(fitbounds="locations")
fig.show()

from statsmodels.tsa.ar_model import AR

def predict(s):
  # Create the AR model
  model = AR(s)

  # Fit the model
  model_fit = model.fit()

  # Make predictions
  predictions = model_fit.predict(start=len(s)-1, end=len(s)+9, dynamic=False)
  return predictions

agedf.NAME.unique
tmp = agedf

df2 = tmp.groupby(tmp.NAME).sum()

df2.drop(df2.columns[[0,1,2,3,4,5,6]], axis = 1, inplace=True)


a = df2.iloc[4]
b = predict(a)

plt.figure(figsize=(11,7))
a.plot(marker='o')
b.plot(marker='o', linestyle='--')
ax = plt.subplot()
ax.set_xticks(range(20))
ax.set_xticklabels(['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023','2024', '2025', '2026', '2027', '2028','2029'])
plt.title(a.name + ' Population Trend', **titleFormat)
plt.xlabel('Year', **labelFormatOut)
plt.xticks(rotation=30)
plt.ylabel('Population',**labelFormatOut)
plt.style.use('ggplot')
plt.legend(['Current', 'Prediction'])
plt.show()

for i in range(51):
  a = df2.iloc[i]
  b = predict(a)
  predicted_rate = b[19]/b[9]
  df.at[i, 'rate'] = predicted_rate
  df.at[i, 'predicted_pop'] = b[14]

fig = px.choropleth(df,  # your dataframe with the state values
                    locations='State',  # column with the state abbreviation
                    locationmode='USA-states',  # set the map to show USA states
                    color='rate',  # column with the value you want to use for shading
                    hover_name='State',  # column to show when hovering over a state
                    title='<b>Population Growth Patterns</b>',  # title of the map
                    color_continuous_scale='hot_r',  # set the color scale to 'hot'
                    height=700,  # set the height of the map
                    width=1000)  # set the width of the map

fig.update_layout(
    title_font_size=50, 
    title_x=0.5,
    title_y=0.9
)
fig.update_geos(fitbounds="locations")
fig.show()

df['predicted_ratio'] = df['predicted_pop'] / df['facilities']
df['predicted_ratio'] = df['predicted_ratio'].apply(lambda x: round(x, 2))

plt.figure(figsize = (12,8))
df.groupby('Full_State')['predicted_ratio'].mean().sort_values().tail(15).plot(kind='barh', color = (0.8,0,0))
plt.title('People per Facility in 5 years', **titleFormat)
plt.xlabel('Predicted Ratio of PPF', **labelFormatOut)
plt.xticks(rotation=30)
plt.ylabel('State', **labelFormatOut)
ax = plt.subplot()
ax.set_axisbelow(True)
ax.xaxis.grid(color='gray', linestyle='dashed')
plt.show()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

df['predicted_ratio'] = scaler.fit_transform(df[['predicted_ratio']])
df['ratio'] = scaler.fit_transform(df[['ratio']])


df['score'] = (df['predicted_ratio']+df['ratio'])/2


plt.figure(figsize = (12,8))
df.groupby('Full_State')['score'].mean().sort_values().tail(15).plot(kind='barh', color = (0.8,0,0))
plt.title('Top States that Need Funding', **titleFormat)
plt.xlabel('Score', **labelFormatOut)
plt.xticks(rotation=30)
plt.ylabel('State', **labelFormatOut)
ax = plt.subplot()
ax.set_axisbelow(True)
ax.xaxis.grid(color='gray', linestyle='dashed')
plt.show()

filepath = Path('/content/drive/MyDrive/Datathon/results.csv')  
filepath.parent.mkdir(parents=True, exist_ok=True)  
df.to_csv(filepath)